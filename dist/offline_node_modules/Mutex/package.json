{
  "_args": [
    [
      "Mutex@git+https://github.com/Perennials/mutex-node.git",
      "/home/chimwemwe/projects/work/apps/architecture/htc"
    ]
  ],
  "_from": "git+https://github.com/Perennials/mutex-node.git",
  "_id": "Mutex@1.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/Mutex",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/Perennials/mutex-node/master/package.json",
      "gitUrl": "git://github.com/Perennials/mutex-node.git",
      "httpsUrl": "git+https://github.com/Perennials/mutex-node.git",
      "shortcut": "github:Perennials/mutex-node",
      "ssh": "git@github.com:Perennials/mutex-node.git",
      "sshUrl": "git+ssh://git@github.com/Perennials/mutex-node.git",
      "type": "github"
    },
    "name": "Mutex",
    "raw": "Mutex@git+https://github.com/Perennials/mutex-node.git",
    "rawSpec": "git+https://github.com/Perennials/mutex-node.git",
    "scope": null,
    "spec": "git+https://github.com/Perennials/mutex-node.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/Perennials/mutex-node.git#ec64d0711d085226b1907f69168f6f743d5fa5db",
  "_shasum": "738e24d418cc2642a826c014db0bb24f2e282422",
  "_shrinkwrap": null,
  "_spec": "Mutex@git+https://github.com/Perennials/mutex-node.git",
  "_where": "/home/chimwemwe/projects/work/apps/architecture/htc",
  "bugs": {
    "url": "https://github.com/Perennials/mutex-node/issues"
  },
  "dependencies": {
    "fs-ext": "0.5.x"
  },
  "description": "Mutex ===== Cross-process named mutex for Node.js using file locks (and not redis!).",
  "devDependencies": {
    "Unitest": "https://github.com/perennials/unitest-js/tarball/master"
  },
  "gitHead": "ec64d0711d085226b1907f69168f6f743d5fa5db",
  "homepage": "https://github.com/Perennials/mutex-node",
  "main": "Mutex.js",
  "name": "Mutex",
  "optionalDependencies": {},
  "private": true,
  "readme": "Mutex\n=====\nCross-process named mutex for Node.js using file locks (and not redis!).\n\n```sh\nnpm install https://github.com/Perennials/mutex-node\n```\n\n*This is port from <https://github.com/Perennials/providerkit-core-php/blob/master/src/sync/Mutex.php>.*\n\n<!-- MarkdownTOC -->\n\n- [Example](#example)\n- [API](#api)\n\t- [Constructor](#constructor)\n\t- [.lock()](#lock)\n\t- [.waitLock()](#waitlock)\n\t- [.tryLock()](#trylock)\n\t- [.unlock()](#unlock)\n\t- [.isLocked()](#islocked)\n- [Authors](#authors)\n\n<!-- /MarkdownTOC -->\n\n\nExample\n-------\n\n```js\nvar Mutex = require( 'Mutex' );\n\nvar mutex = new Mutex( 'should_happen_one_at_a_time' );\nmutex.lock();\n// .. do something and rest assured this is the only process doing it\nmutex.unlock();\n```\n\nAPI\n---\n\n### Constructor\nConstructs a mutex.\n- It starts in unlocked state.\n- The name you provide goes as a file name with extension `.mutex` in the\n  system temporary directory, so don't get too fancy with the name.\n- Consider this will only work if the processes that are to mutually exclude each other\n  use the same temp dir.\n- If `.unlock()` is not properly called the lock file will remain in the temp\n  directory, which will not affect future locking, but just leave trash behind.\n\n```js\nnew Mutex(\n\tname:String\n);\n```\n\n### .lock()\nAcquires the lock without waiting. Meaning if the lock is busy the function\nwill fail immediately.\n\n- If the function works in sync or async mode is determined by the presence of\n  a callback argument.\n- In sync mode the function will throw on errors.\n- The lock can not outlive the process life time, even if it is not released.\n\n```js\n.lock(\n\tcallback:function( err:Error|null )|undefined\n) : Boolean;\n```\n\n### .waitLock()\nAcquires the lock waiting for it to become available if necessary. This\nwaiting does not relate to the asyncness of the function.\n\n- If the function works in sync or async mode is determined by the presence of\n  a callback argument.\n- In sync mode the function may possibly block for very long time until the\n  lock becomes available.\n\n\n```js\n.waitLock(\n\tcallback:function( err:Error|null )|undefined\n) : Boolean;\n```\n\n### .tryLock()\nAcquires the lock without waiting and without throwing.\n\n- If the function works in sync or async mode is determined by the presence of\n  a callback argument.\n- In sync mode the function will not throw but just return false.\n\n```js\n.tryLock(\n\tcallback:function( err:Error|null )|undefined\n) : Boolean;\n```\n\n\n### .unlock()\nReleases the lock.\n\n- If the function works in sync or async mode is determined by the presence of\n  a callback argument.\n- If this function is not properly called the lock file will remain in the temp\n  directory, which will not affect future locking, but just leave trash behind.\n\n```js\n.unlock(\n\tcallback:function( err:Error|null )|undefined\n) : Boolean;\n```\n\n### .isLocked()\nChecks if the mutex is locked.\n\n```js\n.isLocked() : Boolean;\n```\n\nAuthors\n-------\nBorislav Peev (borislav.asdf at gmail dot com)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Perennials/mutex-node.git"
  },
  "version": "1.1.0"
}
